{
  "address": "0xb0ED24357E32522AfD21E46890c5401342e6a5Ad",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_registration",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "string",
          "name": "_checkLogic",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "EmptyArgs",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EmptySource",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NoInlineSecrets",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsAlreadyPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RequestIsNotPending",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SenderIsNotRegistry",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "by",
          "type": "address"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "listingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "githubRepo",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "deposit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "payableAmount",
          "type": "uint256"
        }
      ],
      "name": "ListingCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "result",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "OCRResponse",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "RequestSent",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "repo",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "prUrl",
          "type": "string"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "enum Functions.Location",
              "name": "codeLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.Location",
              "name": "secretsLocation",
              "type": "uint8"
            },
            {
              "internalType": "enum Functions.CodeLanguage",
              "name": "language",
              "type": "uint8"
            },
            {
              "internalType": "string",
              "name": "source",
              "type": "string"
            },
            {
              "internalType": "bytes",
              "name": "secrets",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "args",
              "type": "string[]"
            }
          ],
          "internalType": "struct Functions.Request",
          "name": "req",
          "type": "tuple"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "gasPrice",
          "type": "uint256"
        }
      ],
      "name": "estimateCost",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDONPublicKey",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "githubToCreatorAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "response",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "err",
          "type": "bytes"
        }
      ],
      "name": "handleOracleFulfillment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "githubRepo",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "payableAmount",
          "type": "uint256"
        }
      ],
      "name": "listRepo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "updateOracleAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "usedRequests",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x597a3493beb0e8673a99c4e39f005fa39d6e95f9e351d71c7adea1127e97063a",
  "receipt": {
    "to": null,
    "from": "0x8906EA0bc4b4e62314417eCdcbe45757112720E8",
    "contractAddress": "0xb0ED24357E32522AfD21E46890c5401342e6a5Ad",
    "transactionIndex": 1,
    "gasUsed": "2699855",
    "logsBloom": "0x0000000000000000a000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000200100000000000000000820000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xef888128f0d40c261c3f45d81330f7566629182057a0c4725f90a11af4ad22c2",
    "transactionHash": "0x597a3493beb0e8673a99c4e39f005fa39d6e95f9e351d71c7adea1127e97063a",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27889494,
        "transactionHash": "0x597a3493beb0e8673a99c4e39f005fa39d6e95f9e351d71c7adea1127e97063a",
        "address": "0xb0ED24357E32522AfD21E46890c5401342e6a5Ad",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008906ea0bc4b4e62314417ecdcbe45757112720e8"
        ],
        "data": "0x",
        "logIndex": 4,
        "blockHash": "0xef888128f0d40c261c3f45d81330f7566629182057a0c4725f90a11af4ad22c2"
      }
    ],
    "blockNumber": 27889494,
    "cumulativeGasUsed": "2917705",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xA9d587a00A31A52Ed70D6026794a8FC5E2F5dCb0",
    "0x6Dd7eeBF2C3eBA0bE2261715BB259062CD96E235",
    "0x4d3E28026978973dFf77cf20d81400afAa02c7af",
    20,
    "const repo = args[0];\nconst prNum = args[1];\nconst token = secrets.token; \n\nif (!token) {\n  throw Error(\"Missing secret: github token\");\n}\n\nconst getPrDetailsUrl = repo\n  .replace(\"https://github.com/\", \"https://api.github.com/repos/\") + '/pulls/' + prNum\n\nconst headers = {\n  Authorization: 'token ' + token,\n  Accept: \"application/vnd.github.mockingbird-preview\",\n};\n\n// Get the timeline to find the closing PR\nlet apiResponse = await Functions.makeHttpRequest({ url: getPrDetailsUrl, headers });\n\n\nif (apiResponse.error) {\n  console.error(apiResponse.error);\n  throw Error(\"Request failed\");\n}\n\nconst { data } = apiResponse;\n\nconsole.log(\"API response data:\", JSON.stringify(data, null, 2));\n\nconst { merged, user, created_at } = data;\n\nif (!merged) {\n  throw new Error('Pull request #' + prNumber 'is not merged or could be closed');\n}\n\nreturn Functions.encodeString(JSON.stringify({\n  created_at,\n  user: user.login,\n}));\n"
  ],
  "numDeployments": 1,
  "solcInputHash": "028f9aba28f099c1987249f134c42b13",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registration\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"_checkLogic\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EmptyArgs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptySource\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoInlineSecrets\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsAlreadyPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestIsNotPending\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderIsNotRegistry\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"githubRepo\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payableAmount\",\"type\":\"uint256\"}],\"name\":\"ListingCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"result\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"OCRResponse\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"RequestSent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"repo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"prUrl\",\"type\":\"string\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum Functions.Location\",\"name\":\"codeLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.Location\",\"name\":\"secretsLocation\",\"type\":\"uint8\"},{\"internalType\":\"enum Functions.CodeLanguage\",\"name\":\"language\",\"type\":\"uint8\"},{\"internalType\":\"string\",\"name\":\"source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"secrets\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"args\",\"type\":\"string[]\"}],\"internalType\":\"struct Functions.Request\",\"name\":\"req\",\"type\":\"tuple\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"}],\"name\":\"estimateCost\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDONPublicKey\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"githubToCreatorAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"response\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"err\",\"type\":\"bytes\"}],\"name\":\"handleOracleFulfillment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"githubRepo\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"payableAmount\",\"type\":\"uint256\"}],\"name\":\"listRepo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"updateOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"usedRequests\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"params\":{\"gasLimit\":\"gas limit for the fulfillment callback\",\"req\":\"The initialized Functions.Request\",\"subscriptionId\":\"The subscription ID\"},\"returns\":{\"_0\":\"billedCost Cost in Juels (1e18) of LINK\"}},\"getDONPublicKey()\":{\"details\":\"All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key\",\"returns\":{\"_0\":\"publicKey DON's public key\"}},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"params\":{\"err\":\"Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.\",\"requestId\":\"The requestId returned by FunctionsClient.sendRequest().\",\"response\":\"Aggregated response from the user code.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateOracleAddress(address)\":{\"params\":{\"oracle\":\"New oracle address\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"claim(string,string)\":{\"notice\":\"Can be called by maintainers to claim donations made to their repositories\"},\"estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)\":{\"notice\":\"Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\"},\"getDONPublicKey()\":{\"notice\":\"Returns the DON's secp256k1 public key used to encrypt secrets\"},\"handleOracleFulfillment(bytes32,bytes,bytes)\":{\"notice\":\"Chainlink Functions response handler called by the designated transmitter node in an OCR round.\"},\"updateOracleAddress(address)\":{\"notice\":\"Allows the Functions oracle address to be updated\"}},\"notice\":\"The core functionality is to enable  Creators to list thier github repos, set how the deposit that they will be paid , once the contributor create PR and close the issue , the contract release the payment to the contributor and mint DAO token to the contributor\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ContributionPool.sol\":\"ContributionPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0dd6e52cb394d7f5abe5dca2d4908a6be40417914720932de757de34a99ab87f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.0;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0xac6c2efc64baccbde4904ae18ed45139c9aa8cff96d6888344d1e4d2eb8b659f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\",\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Permit.sol\\\";\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/cryptography/ECDSA.sol\\\";\\nimport \\\"../../../utils/cryptography/EIP712.sol\\\";\\nimport \\\"../../../utils/Counters.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * _Available since v3.4._\\n */\\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\\n    using Counters for Counters.Counter;\\n\\n    mapping(address => Counters.Counter) private _nonces;\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private constant _PERMIT_TYPEHASH =\\n        keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    /**\\n     * @dev In previous versions `_PERMIT_TYPEHASH` was declared as `immutable`.\\n     * However, to ensure consistency with the upgradeable transpiler, we will continue\\n     * to reserve a slot.\\n     * @custom:oz-renamed-from _PERMIT_TYPEHASH\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private _PERMIT_TYPEHASH_DEPRECATED_SLOT;\\n\\n    /**\\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\\\"1\\\"`.\\n     *\\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\\n     */\\n    constructor(string memory name) EIP712(name, \\\"1\\\") {}\\n\\n    /**\\n     * @dev See {IERC20Permit-permit}.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual override {\\n        require(block.timestamp <= deadline, \\\"ERC20Permit: expired deadline\\\");\\n\\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        address signer = ECDSA.recover(hash, v, r, s);\\n        require(signer == owner, \\\"ERC20Permit: invalid signature\\\");\\n\\n        _approve(owner, spender, value);\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-nonces}.\\n     */\\n    function nonces(address owner) public view virtual override returns (uint256) {\\n        return _nonces[owner].current();\\n    }\\n\\n    /**\\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /**\\n     * @dev \\\"Consume a nonce\\\": return the current value and increment.\\n     *\\n     * _Available since v4.1._\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\\n        Counters.Counter storage nonce = _nonces[owner];\\n        current = nonce.current();\\n        nonce.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x36c00327e3f9afd929cc2721aaa111ab57eff78a630cc364b279ad576b899295\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/ShortStrings.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./StorageSlot.sol\\\";\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n    // Used as an identifier for strings longer than 31 bytes.\\n    bytes32 private constant _FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n    error StringTooLong(string str);\\n    error InvalidShortString();\\n\\n    /**\\n     * @dev Encode a string of at most 31 chars into a `ShortString`.\\n     *\\n     * This will trigger a `StringTooLong` error is the input string is too long.\\n     */\\n    function toShortString(string memory str) internal pure returns (ShortString) {\\n        bytes memory bstr = bytes(str);\\n        if (bstr.length > 31) {\\n            revert StringTooLong(str);\\n        }\\n        return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n    }\\n\\n    /**\\n     * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n     */\\n    function toString(ShortString sstr) internal pure returns (string memory) {\\n        uint256 len = byteLength(sstr);\\n        // using `new string(len)` would work locally but is not memory safe.\\n        string memory str = new string(32);\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(str, len)\\n            mstore(add(str, 0x20), sstr)\\n        }\\n        return str;\\n    }\\n\\n    /**\\n     * @dev Return the length of a `ShortString`.\\n     */\\n    function byteLength(ShortString sstr) internal pure returns (uint256) {\\n        uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n        if (result > 31) {\\n            revert InvalidShortString();\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n     */\\n    function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n        if (bytes(value).length < 32) {\\n            return toShortString(value);\\n        } else {\\n            StorageSlot.getStringSlot(store).value = value;\\n            return ShortString.wrap(_FALLBACK_SENTINEL);\\n        }\\n    }\\n\\n    /**\\n     * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     */\\n    function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return toString(value);\\n        } else {\\n            return store;\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the length of a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n     *\\n     * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n     * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n     */\\n    function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n        if (ShortString.unwrap(value) != _FALLBACK_SENTINEL) {\\n            return byteLength(value);\\n        } else {\\n            return bytes(store).length;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc0e310c163edf15db45d4ff938113ab357f94fa86e61ea8e790853c4d2e13256\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./ECDSA.sol\\\";\\nimport \\\"../ShortStrings.sol\\\";\\nimport \\\"../../interfaces/IERC5267.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the `_domainSeparatorV4` function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * _Available since v3.4._\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n */\\nabstract contract EIP712 is IERC5267 {\\n    using ShortStrings for *;\\n\\n    bytes32 private constant _TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n    // invalidate the cached domain separator if the chain id changes.\\n    bytes32 private immutable _cachedDomainSeparator;\\n    uint256 private immutable _cachedChainId;\\n    address private immutable _cachedThis;\\n\\n    bytes32 private immutable _hashedName;\\n    bytes32 private immutable _hashedVersion;\\n\\n    ShortString private immutable _name;\\n    ShortString private immutable _version;\\n    string private _nameFallback;\\n    string private _versionFallback;\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    constructor(string memory name, string memory version) {\\n        _name = name.toShortStringWithFallback(_nameFallback);\\n        _version = version.toShortStringWithFallback(_versionFallback);\\n        _hashedName = keccak256(bytes(name));\\n        _hashedVersion = keccak256(bytes(version));\\n\\n        _cachedChainId = block.chainid;\\n        _cachedDomainSeparator = _buildDomainSeparator();\\n        _cachedThis = address(this);\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n            return _cachedDomainSeparator;\\n        } else {\\n            return _buildDomainSeparator();\\n        }\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(_TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {EIP-5267}.\\n     *\\n     * _Available since v4.9._\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _name.toStringWithFallback(_nameFallback),\\n            _version.toStringWithFallback(_versionFallback),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x8432884527a7ad91e6eed1cfc5a0811ae2073e5bca107bd0ca442e9236b03dbd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ContributionPool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\n import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport {Functions, FunctionsClient} from \\\"./dev/functions/FunctionsClient.sol\\\";\\n\\nimport \\\"./DAOToken.sol\\\";\\nimport \\\"./Registration.sol\\\";\\n\\n/// This contract should handle the relation between open source project creator and open source project contributors.\\n/// personas : \\n    //// 1- Open source project contributors , looking for open source project to contribute to and get paid for thier work . with each contribution DAO token is minted \\n    //// 2- Open source project creator , look for contributors to thier open source project and pay them for thier work . They have to be DAO token holder to be able to list thier project and they have to deposit bug bounty amount in the contract to be able to pay contributors\\n/// The core functionality is to enable  Creators to list thier github repos, set how the deposit that they will be paid , once the contributor create PR and close the issue , the contract release the payment to the contributor and mint DAO token to the contributor\\ncontract ContributionPool  is  Ownable, FunctionsClient{\\n     using Functions for Functions.Request;\\n    uint256 counter;\\n    Registration registration;\\n    uint64 subscriptionId;\\n    DAOToken token;\\n    mapping (address=>Listing) CreatorListings;\\n    mapping (string=>address) public githubToCreatorAddress;\\n    struct Listing{\\n        uint256 listingId;\\n        string githubRepo;\\n        uint256 currentDeposit;\\n        uint256 payableAmount;\\n            }         \\n  mapping(bytes32 => address) internal runningClaims;\\n  mapping(bytes32 => address) internal requestIdToCreator;\\n  mapping(bytes32 => string) internal requestIdToprUrl;\\n  mapping(bytes32 => uint256) internal requestIdToListingId;\\n  string internal checkLogic;\\n\\n  mapping (string=>bool) public usedRequests;\\n\\n\\n  event OCRResponse(bytes32 indexed requestId, bytes result, bytes err);\\n  event Claimed(uint amount, address by);\\n\\n  constructor(address oracle, address _registration, address _token,uint64 _subscriptionId,  string memory _checkLogic) FunctionsClient(oracle) {\\n        setOracle(oracle);\\n    checkLogic = _checkLogic;\\n    registration = Registration(_registration);\\n    token = DAOToken(_token);\\n    subscriptionId = _subscriptionId;\\n    \\n  }\\n    function listRepo (string memory githubRepo, uint256 payableAmount) public payable {\\n        // require(Registration(msg.sender).IsProjectCreatorRegistered(msg.sender),\\\"not registered as project creator\\\");\\n        // require(CreatorListings[msg.sender].listingId==0,\\\"already listed\\\");\\n        counter++;\\n        githubToCreatorAddress[githubRepo] = msg.sender;\\n        CreatorListings[msg.sender] = Listing(counter,githubRepo,msg.value,payableAmount);\\n    }\\n\\n\\n  /// @notice Can be called by maintainers to claim donations made to their repositories\\n  function claim(string calldata repo, string  calldata prUrl ) public {\\n    ///  check balance to make sure that project creators don't sepend more than the deposit\\n    require(CreatorListings[githubToCreatorAddress[repo]].currentDeposit >= CreatorListings[githubToCreatorAddress[repo]].payableAmount,\\\"not enough balance to pay\\\");\\n    require(!usedRequests[prUrl],\\\"request already used\\\");\\n    Functions.Request memory req;\\n    req.initializeRequest(Functions.Location.Inline, Functions.CodeLanguage.JavaScript, checkLogic);\\n\\n    string[] memory args = new string[](1);\\n    args[0] = prUrl;\\n \\n    req.addArgs(args);\\n    \\n   \\n    bytes32 assignedReqID = sendRequest(req, subscriptionId, 300000);\\n     requestIdToCreator[assignedReqID] = githubToCreatorAddress[repo];\\n     runningClaims[assignedReqID] = githubToCreatorAddress[repo];\\n    requestIdToprUrl[assignedReqID] = prUrl;\\n    requestIdToListingId[assignedReqID] = CreatorListings[githubToCreatorAddress[repo]].listingId;\\n  }\\n\\n     /// @notice Finalizes the claim process after Chainlink Functions has finished the authentication\\n  function finalizeClaim(address creator,string memory _login, string memory githubIssue, uint256 bountyAmount ) internal {\\n// get address of github handle\\n    address devAddress= registration.getDeveloperAddress(_login);\\n    usedRequests[githubIssue] = true;\\n// make the github issue as done \\n CreatorListings[creator].currentDeposit -= bountyAmount;\\n// mint token \\n\\n    token.mint(devAddress,1);\\n    // emit event\\n\\n    emit Claimed(bountyAmount, devAddress);\\n    // release payment \\n    payable(msg.sender).transfer(bountyAmount);\\n  }\\n\\n \\n\\n  /// @notice Callback that is invoked once the DON has resolved the request or hit an error\\n  ///\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the user code\\n  /// @param err Aggregated error from the user code or from the execution pipeline\\n  /// Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal override {\\n    emit OCRResponse(requestId, response, err);\\n\\n    if (response.length > 0 && runningClaims[requestId] != address(0)) {\\n      string memory githubHandle = string(response);\\n\\n        finalizeClaim(requestIdToCreator[requestId],githubHandle, requestIdToprUrl[requestId], requestIdToListingId[requestId]);\\n       \\n    }\\n  }\\n\\n  /// @notice Allows the Functions oracle address to be updated\\n  ///\\n  /// @param oracle New oracle address\\n  function updateOracleAddress(address oracle) public onlyOwner {\\n    setOracle(oracle);\\n  }\\n\\n\\n\\n    event ListingCreated(uint256 listingId, string githubRepo, uint256 deposit, uint256 payableAmount);\\n\\n    \\n}\",\"keccak256\":\"0x109bda251790e02c2b341cd858e1b9777262ca31da652eb927c7511960e6b0b1\",\"license\":\"UNLICENSED\"},\"contracts/DAOToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Permit.sol\\\";\\n\\ncontract DAOToken is ERC20, AccessControl, ERC20Permit {\\n    bytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\n    constructor(address defaultAdmin, address minter)\\n        ERC20(\\\"DAOToken\\\", \\\"DT\\\")\\n        ERC20Permit(\\\"DAOToken\\\")\\n    {\\n        _grantRole(DEFAULT_ADMIN_ROLE, defaultAdmin);\\n        _grantRole(MINTER_ROLE, minter);\\n    }\\n\\n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) {\\n        _mint(to, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xae688151088b937373ecd342604ae70748ee6b7d3d262ae158ee1d765b2af291\",\"license\":\"MIT\"},\"contracts/Registration.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// the contract should manage user registration , for creator and contributors\\n\\ncontract Registration is Pausable, Ownable {\\n\\n    mapping (string=>address) public  githubToAddress;\\n    mapping (address=>string) public addressToGithub;\\n    mapping (address=>uint256) public creatorRegistratedTime;\\n    IERC20 daoToken;\\n    uint256 public blanceToJoin;\\n    constructor(address token , uint256 _blanceToJoin)  {\\n        daoToken = IERC20(token);\\n        require(_blanceToJoin>10,\\\"balance must be greater than 10\\\");\\n        blanceToJoin = _blanceToJoin;\\n    }\\n    function updateBlanceToJoin(uint256 _blanceToJoin) public onlyOwner{\\n        require(_blanceToJoin>10,\\\"balance must be greater than 10\\\");\\n        blanceToJoin = _blanceToJoin;\\n    }\\n\\n        // register as contributor\\n\\n    function joinAsContributor(string memory githubUsername) public  whenNotPaused{\\n        require(githubToAddress[githubUsername] == address(0), \\\"github username already registered\\\");\\n        githubToAddress[githubUsername] = msg.sender;\\n        addressToGithub[msg.sender] = githubUsername;\\n        emit ContributorRegistered(msg.sender, githubUsername);\\n    }\\n\\n\\n    // join as open-source-project-creator\\n    // later we need to handle case of creator manipulating the contract by selling the token after joining \\n\\n    function joinAsOpenSourceProjectCreator() public  whenNotPaused{\\n        require(creatorRegistratedTime[msg.sender]==0, \\\"already registered as open source project creator\\\");\\n      /// make sure creator is qualified to join\\n        require(daoToken.balanceOf(msg.sender) >= blanceToJoin, \\\"not enough balance to join\\\");\\n        creatorRegistratedTime[msg.sender] = block.timestamp;\\n        emit CreatorRegistered(msg.sender);\\n    }\\n\\n function IsProjectCreatorRegistered(address creatorAddress) public view returns(bool){\\n     return creatorRegistratedTime[creatorAddress]!=0;}\\n    // leave \\n    function getDeveloperGithub(address dev) public view returns(\\n        string memory githubUsername\\n    ){\\n        return addressToGithub[dev];\\n    }\\n    function getDeveloperAddress(string memory githubUsername) public view returns( address){\\n        return githubToAddress[githubUsername];\\n    }\\n\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    event CreatorRegistered(address indexed creatorAddress);\\n    event ContributorRegistered(address indexed contributorAddress, string indexed githubUsername);\\n     \\n\\n}\\n\\n\",\"keccak256\":\"0x4d46edd582175fb5f70698ba5e1c2ee354e389755f1c3ce498a3598609aa5ed7\",\"license\":\"UNLICENSED\"},\"contracts/dev/functions/Functions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport {CBOR, Buffer} from \\\"../vendor/solidity-cborutils/2.0.0/CBOR.sol\\\";\\n\\n/**\\n * @title Library for Chainlink Functions\\n */\\nlibrary Functions {\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  using CBOR for Buffer.buffer;\\n\\n  enum Location {\\n    Inline,\\n    Remote\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation;\\n    Location secretsLocation;\\n    CodeLanguage language;\\n    string source; // Source code for Location.Inline or url for Location.Remote\\n    bytes secrets; // Encrypted secrets blob for Location.Inline or url for Location.Remote\\n    string[] args;\\n  }\\n\\n  error EmptySource();\\n  error EmptyUrl();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /**\\n   * @notice Encodes a Request to CBOR encoded bytes\\n   * @param self The request to encode\\n   * @return CBOR encoded bytes\\n   */\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer;\\n    Buffer.init(buffer.buf, DEFAULT_BUFFER_SIZE);\\n\\n    CBOR.writeString(buffer, \\\"codeLocation\\\");\\n    CBOR.writeUInt256(buffer, uint256(self.codeLocation));\\n\\n    CBOR.writeString(buffer, \\\"language\\\");\\n    CBOR.writeUInt256(buffer, uint256(self.language));\\n\\n    CBOR.writeString(buffer, \\\"source\\\");\\n    CBOR.writeString(buffer, self.source);\\n\\n    if (self.args.length > 0) {\\n      CBOR.writeString(buffer, \\\"args\\\");\\n      CBOR.startArray(buffer);\\n      for (uint256 i = 0; i < self.args.length; i++) {\\n        CBOR.writeString(buffer, self.args[i]);\\n      }\\n      CBOR.endSequence(buffer);\\n    }\\n\\n    if (self.secrets.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      CBOR.writeString(buffer, \\\"secretsLocation\\\");\\n      CBOR.writeUInt256(buffer, uint256(self.secretsLocation));\\n      CBOR.writeString(buffer, \\\"secrets\\\");\\n      CBOR.writeBytes(buffer, self.secrets);\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Sets the codeLocation and code on the request\\n   * @param self The uninitialized request\\n   * @param location The user provided source code location\\n   * @param language The programming language of the user code\\n   * @param source The user provided source code or a url\\n   */\\n  function initializeRequest(\\n    Request memory self,\\n    Location location,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = location;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink Functions Request\\n   * @dev Simplified version of initializeRequest for PoC\\n   * @param self The uninitialized request\\n   * @param javaScriptSource The user provided JS code (must not be empty)\\n   */\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /**\\n   * @notice Adds Remote user encrypted secrets to a Request\\n   * @param self The initialized request\\n   * @param encryptedSecretsURLs Encrypted comma-separated string of URLs pointing to off-chain secrets\\n   */\\n  function addRemoteSecrets(Request memory self, bytes memory encryptedSecretsURLs) internal pure {\\n    if (encryptedSecretsURLs.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.secrets = encryptedSecretsURLs;\\n  }\\n\\n  /**\\n   * @notice Adds args for the user run function\\n   * @param self The initialized request\\n   * @param args The array of args (must not be empty)\\n   */\\n  function addArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n}\\n\",\"keccak256\":\"0x003968103f0a16719cd94bb3712e47e2fa9bcf8ec9750c8460a89d5a8aa0ec94\",\"license\":\"MIT\"},\"contracts/dev/functions/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./Functions.sol\\\";\\nimport \\\"../interfaces/FunctionsClientInterface.sol\\\";\\nimport \\\"../interfaces/FunctionsOracleInterface.sol\\\";\\n\\n/**\\n * @title The Chainlink Functions client contract\\n * @notice Contract writers can inherit this contract in order to create Chainlink Functions requests\\n */\\nabstract contract FunctionsClient is FunctionsClientInterface {\\n  FunctionsOracleInterface internal s_oracle;\\n  mapping(bytes32 => address) internal s_pendingRequests;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error SenderIsNotRegistry();\\n  error RequestIsAlreadyPending();\\n  error RequestIsNotPending();\\n\\n  constructor(address oracle) {\\n    setOracle(oracle);\\n  }\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function getDONPublicKey() external view override returns (bytes memory) {\\n    return s_oracle.getDONPublicKey();\\n  }\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) public view returns (uint96) {\\n    return s_oracle.estimateCost(subscriptionId, Functions.encodeCBOR(req), gasLimit, gasPrice);\\n  }\\n\\n  /**\\n   * @notice Sends a Chainlink Functions request to the stored oracle address\\n   * @param req The initialized Functions.Request\\n   * @param subscriptionId The subscription ID\\n   * @param gasLimit gas limit for the fulfillment callback\\n   * @return requestId The generated request ID\\n   */\\n  function sendRequest(\\n    Functions.Request memory req,\\n    uint64 subscriptionId,\\n    uint32 gasLimit\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = s_oracle.sendRequest(subscriptionId, Functions.encodeCBOR(req), gasLimit);\\n    s_pendingRequests[requestId] = s_oracle.getRegistry();\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /**\\n   * @notice User defined function to handle a response\\n   * @param requestId The request ID, returned by sendRequest()\\n   * @param response Aggregated response from the user code\\n   * @param err Aggregated error from the user code or from the execution pipeline\\n   * Either response or error parameter will be set, but never both\\n   */\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /**\\n   * @inheritdoc FunctionsClientInterface\\n   */\\n  function handleOracleFulfillment(\\n    bytes32 requestId,\\n    bytes memory response,\\n    bytes memory err\\n  ) external override recordChainlinkFulfillment(requestId) {\\n    fulfillRequest(requestId, response, err);\\n  }\\n\\n  /**\\n   * @notice Sets the stored Oracle address\\n   * @param oracle The address of Functions Oracle contract\\n   */\\n  function setOracle(address oracle) internal {\\n    s_oracle = FunctionsOracleInterface(oracle);\\n  }\\n\\n  /**\\n   * @notice Gets the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function getChainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle that serviced the request.\\n   * Emits RequestFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    if (msg.sender != s_pendingRequests[requestId]) {\\n      revert SenderIsNotRegistry();\\n    }\\n    delete s_pendingRequests[requestId];\\n    emit RequestFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    if (s_pendingRequests[requestId] != address(0)) {\\n      revert RequestIsAlreadyPending();\\n    }\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xfa7781ceb018c740ef7eb51e6cb3ba0486efa8e133db1cc30b1842f513789559\",\"license\":\"MIT\"},\"contracts/dev/interfaces/FunctionsBillingRegistryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions billing subscription registry interface.\\n */\\ninterface FunctionsBillingRegistryInterface {\\n  struct RequestBilling {\\n    // a unique subscription ID allocated by billing system,\\n    uint64 subscriptionId;\\n    // the client contract that initiated the request to the DON\\n    // to use the subscription it must be added as a consumer on the subscription\\n    address client;\\n    // customer specified gas limit for the fulfillment callback\\n    uint32 gasLimit;\\n    // the expected gas price used to execute the transaction\\n    uint256 gasPrice;\\n  }\\n\\n  enum FulfillResult {\\n    USER_SUCCESS,\\n    USER_ERROR,\\n    INVALID_REQUEST_ID\\n  }\\n\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return uint32 global max for request gas limit\\n   * @return address[] list of registered DONs\\n   */\\n  function getRequestConfig() external view returns (uint32, address[] memory);\\n\\n  /**\\n   * @notice Determine the charged fee that will be paid to the Registry owner\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(\\n    bytes calldata data,\\n    FunctionsBillingRegistryInterface.RequestBilling memory billing\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param gasLimit Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasPrice The request's billing configuration\\n   * @param donFee Fee charged by the DON that is paid to Oracle Node\\n   * @param registryFee Fee charged by the DON that is paid to Oracle Node\\n   * @return costEstimate Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint32 gasLimit,\\n    uint256 gasPrice,\\n    uint96 donFee,\\n    uint96 registryFee\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Initiate the billing process for an Functions request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing Billing configuration for the request\\n   * @return requestId - A unique identifier of the request. Can be used to match a request to a response in fulfillRequest.\\n   * @dev Only callable by a node that has been approved on the Registry\\n   */\\n  function startBilling(bytes calldata data, RequestBilling calldata billing) external returns (bytes32);\\n\\n  /**\\n   * @notice Finalize billing process for an Functions request by sending a callback to the Client contract and then charging the subscription\\n   * @param requestId identifier for the request that was generated by the Registry in the beginBilling commitment\\n   * @param response response data from DON consensus\\n   * @param err error from DON consensus\\n   * @param transmitter the Oracle who sent the report\\n   * @param signers the Oracles who had a part in generating the report\\n   * @param signerCount the number of signers on the report\\n   * @param reportValidationGas the amount of gas used for the report validation. Cost is split by all fulfillments on the report.\\n   * @param initialGas the initial amount of gas that should be used as a baseline to charge the single fulfillment for execution cost\\n   * @return result fulfillment result\\n   * @dev Only callable by a node that has been approved on the Registry\\n   * @dev simulated offchain to determine if sufficient balance is present to fulfill the request\\n   */\\n  function fulfillAndBill(\\n    bytes32 requestId,\\n    bytes calldata response,\\n    bytes calldata err,\\n    address transmitter,\\n    address[31] memory signers, // 31 comes from OCR2Abstract.sol's maxNumOracles constant\\n    uint8 signerCount,\\n    uint256 reportValidationGas,\\n    uint256 initialGas\\n  ) external returns (FulfillResult);\\n\\n  /**\\n   * @notice Gets subscription owner.\\n   * @param subscriptionId - ID of the subscription\\n   * @return owner - owner of the subscription.\\n   */\\n  function getSubscriptionOwner(uint64 subscriptionId) external view returns (address owner);\\n}\\n\",\"keccak256\":\"0x5a7ce5fb8dbf28d839fa9d3e18d907699e78cea2432e67fadf46d7c7dd4b0191\",\"license\":\"MIT\"},\"contracts/dev/interfaces/FunctionsClientInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\n/**\\n * @title Chainlink Functions client interface.\\n */\\ninterface FunctionsClientInterface {\\n  /**\\n   * @notice Returns the DON's secp256k1 public key used to encrypt secrets\\n   * @dev All Oracles nodes have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Chainlink Functions response handler called by the designated transmitter node in an OCR round.\\n   * @param requestId The requestId returned by FunctionsClient.sendRequest().\\n   * @param response Aggregated response from the user code.\\n   * @param err Aggregated error either from the user code or from the execution pipeline.\\n   * Either response or error parameter will be set, but never both.\\n   */\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0xb8679179701c31a587c4ce46ba4aec422147598ef0a9c8cf9d200ab4c1731a85\",\"license\":\"MIT\"},\"contracts/dev/interfaces/FunctionsOracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./FunctionsBillingRegistryInterface.sol\\\";\\n\\n/**\\n * @title Chainlink Functions oracle interface.\\n */\\ninterface FunctionsOracleInterface {\\n  /**\\n   * @notice Gets the stored billing registry address\\n   * @return registryAddress The address of Chainlink Functions billing registry contract\\n   */\\n  function getRegistry() external view returns (address);\\n\\n  /**\\n   * @notice Sets the stored billing registry address\\n   * @param registryAddress The new address of Chainlink Functions billing registry contract\\n   */\\n  function setRegistry(address registryAddress) external;\\n\\n  /**\\n   * @notice Returns the DON's secp256k1 public key that is used to encrypt secrets\\n   * @dev All nodes on the DON have the corresponding private key\\n   * needed to decrypt the secrets encrypted with the public key\\n   * @return publicKey the DON's public key\\n   */\\n  function getDONPublicKey() external view returns (bytes memory);\\n\\n  /**\\n   * @notice Sets DON's secp256k1 public key used to encrypt secrets\\n   * @dev Used to rotate the key\\n   * @param donPublicKey The new public key\\n   */\\n  function setDONPublicKey(bytes calldata donPublicKey) external;\\n\\n  /**\\n   * @notice Sets a per-node secp256k1 public key used to encrypt secrets for that node\\n   * @dev Callable only by contract owner and DON members\\n   * @param node node's address\\n   * @param publicKey node's public key\\n   */\\n  function setNodePublicKey(address node, bytes calldata publicKey) external;\\n\\n  /**\\n   * @notice Deletes node's public key\\n   * @dev Callable only by contract owner or the node itself\\n   * @param node node's address\\n   */\\n  function deleteNodePublicKey(address node) external;\\n\\n  /**\\n   * @notice Return two arrays of equal size containing DON members' addresses and their corresponding\\n   * public keys (or empty byte arrays if per-node key is not defined)\\n   */\\n  function getAllNodePublicKeys() external view returns (address[] memory, bytes[] memory);\\n\\n  /**\\n   * @notice Determine the fee charged by the DON that will be split between signing Node Operators for servicing the request\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param billing The request's billing configuration\\n   * @return fee Cost in Juels (1e18) of LINK\\n   */\\n  function getRequiredFee(\\n    bytes calldata data,\\n    FunctionsBillingRegistryInterface.RequestBilling calldata billing\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return billedCost Cost in Juels (1e18) of LINK\\n   */\\n  function estimateCost(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint32 gasLimit,\\n    uint256 gasPrice\\n  ) external view returns (uint96);\\n\\n  /**\\n   * @notice Sends a request (encoded as data) using the provided subscriptionId\\n   * @param subscriptionId A unique subscription ID allocated by billing system,\\n   * a client can make requests from different contracts referencing the same subscription\\n   * @param data Encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n   * @param gasLimit Gas limit for the fulfillment callback\\n   * @return requestId A unique request identifier (unique per DON)\\n   */\\n  function sendRequest(uint64 subscriptionId, bytes calldata data, uint32 gasLimit) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xa6f3b418bcdbfee252c90bb47ef54f321189f2544d95dd3206dbc591f5d38ab5\",\"license\":\"MIT\"},\"contracts/dev/vendor/@ensdomains/buffer/0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for appending to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary Buffer {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      let fpm := add(32, add(ptr, capacity))\\n      if lt(fpm, ptr) {\\n        revert(0, 0)\\n      }\\n      mstore(0x40, fpm)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data, uint256 len) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    uint256 off = buf.buf.length;\\n    uint256 newCapacity = off + len;\\n    if (newCapacity > buf.capacity) {\\n      resize(buf, newCapacity * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(newCapacity, buflen) {\\n        mstore(bufptr, newCapacity)\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256 ** (32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return append(buf, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    uint256 off = buf.buf.length;\\n    uint256 offPlusOne = off + 1;\\n    if (off >= buf.capacity) {\\n      resize(buf, offPlusOne * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if gt(offPlusOne, mload(bufptr)) {\\n        mstore(bufptr, offPlusOne)\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes32 data, uint256 len) private pure returns (buffer memory) {\\n    uint256 off = buf.buf.length;\\n    uint256 newCapacity = len + off;\\n    if (newCapacity > buf.capacity) {\\n      resize(buf, newCapacity * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256 ** len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + newCapacity\\n        let dest := add(bufptr, newCapacity)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(newCapacity, mload(bufptr)) {\\n          mstore(bufptr, newCapacity)\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return append(buf, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return append(buf, data, 32);\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer.\\n   */\\n  function appendInt(buffer memory buf, uint256 data, uint256 len) internal pure returns (buffer memory) {\\n    uint256 off = buf.buf.length;\\n    uint256 newCapacity = len + off;\\n    if (newCapacity > buf.capacity) {\\n      resize(buf, newCapacity * 2);\\n    }\\n\\n    uint256 mask = (256 ** len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + sizeof(buffer length) + newCapacity\\n      let dest := add(bufptr, newCapacity)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(newCapacity, mload(bufptr)) {\\n        mstore(bufptr, newCapacity)\\n      }\\n    }\\n    return buf;\\n  }\\n}\\n\",\"keccak256\":\"0x136790eb689cbbeeddac95a2cba37d1537018ecc20c090f83359ad74b65c166e\",\"license\":\"BSD-2-Clause\"},\"contracts/dev/vendor/solidity-cborutils/2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/0.1.0/Buffer.sol\\\";\\n\\n/**\\n * @dev A library for populating CBOR encoded payload in Solidity.\\n *\\n * https://datatracker.ietf.org/doc/html/rfc7049\\n *\\n * The library offers various write* and start* methods to encode values of different types.\\n * The resulted buffer can be obtained with data() method.\\n * Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n * in an invalid CBOR if start/write/end flow is violated.\\n * For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n * except for nested start/end pairs.\\n */\\n\\nlibrary CBOR {\\n  using Buffer for Buffer.buffer;\\n\\n  struct CBORBuffer {\\n    Buffer.buffer buf;\\n    uint256 depth;\\n  }\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  uint8 private constant CBOR_FALSE = 20;\\n  uint8 private constant CBOR_TRUE = 21;\\n  uint8 private constant CBOR_NULL = 22;\\n  uint8 private constant CBOR_UNDEFINED = 23;\\n\\n  function create(uint256 capacity) internal pure returns (CBORBuffer memory cbor) {\\n    Buffer.init(cbor.buf, capacity);\\n    cbor.depth = 0;\\n    return cbor;\\n  }\\n\\n  function data(CBORBuffer memory buf) internal pure returns (bytes memory) {\\n    require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n    return buf.buf.buf;\\n  }\\n\\n  function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n    buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    writeBytes(buf, abi.encode(value));\\n  }\\n\\n  function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n    if (value < 0) {\\n      buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n      writeBytes(buf, abi.encode(uint256(-1 - value)));\\n    } else {\\n      writeUInt256(buf, uint256(value));\\n    }\\n  }\\n\\n  function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n    writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n  }\\n\\n  function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n    if (value >= 0) {\\n      writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    } else {\\n      writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n    }\\n  }\\n\\n  function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n    writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.buf.append(value);\\n  }\\n\\n  function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n    writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.buf.append(bytes(value));\\n  }\\n\\n  function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n    writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n  }\\n\\n  function writeNull(CBORBuffer memory buf) internal pure {\\n    writeContentFree(buf, CBOR_NULL);\\n  }\\n\\n  function writeUndefined(CBORBuffer memory buf) internal pure {\\n    writeContentFree(buf, CBOR_UNDEFINED);\\n  }\\n\\n  function startArray(CBORBuffer memory buf) internal pure {\\n    writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n    buf.depth += 1;\\n  }\\n\\n  function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n    writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n  }\\n\\n  function startMap(CBORBuffer memory buf) internal pure {\\n    writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n    buf.depth += 1;\\n  }\\n\\n  function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n    writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n  }\\n\\n  function endSequence(CBORBuffer memory buf) internal pure {\\n    writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n    buf.depth -= 1;\\n  }\\n\\n  function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n    writeString(buf, key);\\n    writeString(buf, value);\\n  }\\n\\n  function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n    writeString(buf, key);\\n    writeBytes(buf, value);\\n  }\\n\\n  function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n    writeString(buf, key);\\n    writeUInt256(buf, value);\\n  }\\n\\n  function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n    writeString(buf, key);\\n    writeInt256(buf, value);\\n  }\\n\\n  function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n    writeString(buf, key);\\n    writeUInt64(buf, value);\\n  }\\n\\n  function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n    writeString(buf, key);\\n    writeInt64(buf, value);\\n  }\\n\\n  function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n    writeString(buf, key);\\n    writeBool(buf, value);\\n  }\\n\\n  function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n    writeString(buf, key);\\n    writeNull(buf);\\n  }\\n\\n  function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n    writeString(buf, key);\\n    writeUndefined(buf);\\n  }\\n\\n  function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n    writeString(buf, key);\\n    startMap(buf);\\n  }\\n\\n  function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n    writeString(buf, key);\\n    startArray(buf);\\n  }\\n\\n  function writeFixedNumeric(CBORBuffer memory buf, uint8 major, uint64 value) private pure {\\n    if (value <= 23) {\\n      buf.buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.buf.appendUint8(uint8((major << 5) | 24));\\n      buf.buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.buf.appendUint8(uint8((major << 5) | 25));\\n      buf.buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.buf.appendUint8(uint8((major << 5) | 26));\\n      buf.buf.appendInt(value, 4);\\n    } else {\\n      buf.buf.appendUint8(uint8((major << 5) | 27));\\n      buf.buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major) private pure {\\n    buf.buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length) private pure {\\n    writeFixedNumeric(buf, major, length);\\n  }\\n\\n  function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n    buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n  }\\n}\\n\",\"keccak256\":\"0x899020e1a773e6c6c4d52619db3f25b9ed479d41db109b71ed4a2401312e78f5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200257e3803806200257e833981016040819052620000349162000141565b846200004033620000be565b50600180546001600160a01b0319166001600160a01b038716179055600c6200006a8282620002f7565b505060048054600580546001600160a01b039586166001600160a01b0319919091161790556001600160401b03909216600160a01b026001600160e01b0319909216929093169190911717905550620003c3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200012657600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600080600080600060a086880312156200015a57600080fd5b62000165866200010e565b94506020620001768188016200010e565b945062000186604088016200010e565b60608801519094506001600160401b038082168214620001a557600080fd5b608089015191945080821115620001bb57600080fd5b818901915089601f830112620001d057600080fd5b815181811115620001e557620001e56200012b565b604051601f8201601f19908116603f011681019083821181831017156200021057620002106200012b565b816040528281528c868487010111156200022957600080fd5b600093505b828410156200024d57848401860151818501870152928501926200022e565b60008684830101528096505050505050509295509295909350565b600181811c908216806200027d57607f821691505b6020821081036200029e57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002f257600081815260208120601f850160051c81016020861015620002cd5750805b601f850160051c820191505b81811015620002ee57828155600101620002d9565b5050505b505050565b81516001600160401b038111156200031357620003136200012b565b6200032b8162000324845462000268565b84620002a4565b602080601f8311600181146200036357600084156200034a5750858301515b600019600386901b1c1916600185901b178555620002ee565b600085815260208120601f198616915b82811015620003945788860151825594840194600190910190840162000373565b5085821015620003b35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6121ab80620003d36000396000f3fe6080604052600436106100bc5760003560e01c806396d05b0411610074578063d4b391751161004e578063d4b3917514610210578063f2fde38b1461024d578063f7023bb61461026d57600080fd5b806396d05b041461018d578063cb6ab5d8146101ce578063d328a91e146101ee57600080fd5b8063601a8d33116100a5578063601a8d3314610133578063715018a6146101465780638da5cb5b1461015b57600080fd5b80630ca76175146100c15780630f0a585f146100e3575b600080fd5b3480156100cd57600080fd5b506100e16100dc3660046117f9565b61028d565b005b3480156100ef57600080fd5b5061011e6100fe366004611866565b8051602081830181018051600d8252928201919093012091525460ff1681565b60405190151581526020015b60405180910390f35b6100e16101413660046118a3565b610333565b34801561015257600080fd5b506100e16103e3565b34801561016757600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161012a565b34801561019957600080fd5b506101756101a8366004611866565b80516020818301810180516007825292820191909301209152546001600160a01b031681565b3480156101da57600080fd5b506100e16101e9366004611931565b6103f7565b3480156101fa57600080fd5b506102036107f0565b60405161012a91906119ed565b34801561021c57600080fd5b5061023061022b366004611aee565b610880565b6040516bffffffffffffffffffffffff909116815260200161012a565b34801561025957600080fd5b506100e1610268366004611c15565b610909565b34801561027957600080fd5b506100e1610288366004611c15565b610999565b60008381526002602052604090205483906001600160a01b031633146102df576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526002602052604080822080546001600160a01b03191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a261032d8484846109bf565b50505050565b6003805490600061034383611c48565b9190505550336007836040516103599190611c61565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b03959095169490941790935560808301815260035483528183018581523484830152606084018590523360009081526006909352912082518155905160018201906103c89082611cfd565b50604082015160028201556060909101516003909101555050565b6103eb610af8565b6103f56000610b52565b565b600660006007868660405161040d929190611dbd565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600301546006600060078787604051610469929190611dbd565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206002015410156104e85760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f7567682062616c616e636520746f207061790000000000000060448201526064015b60405180910390fd5b600d82826040516104fa929190611dbd565b9081526040519081900360200190205460ff161561055a5760405162461bcd60e51b815260206004820152601460248201527f7265717565737420616c7265616479207573656400000000000000000000000060448201526064016104df565b6105946040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b610636600080600c80546105a790611c7d565b80601f01602080910402602001604051908101604052809291908181526020018280546105d390611c7d565b80156106205780601f106105f557610100808354040283529160200191610620565b820191906000526020600020905b81548152906001019060200180831161060357829003601f168201915b505050505084610ba2909392919063ffffffff16565b604080516001808252818301909252600091816020015b606081526020019060019003908161064d57905050905083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508551869450909250151590506106ae576106ae611dcd565b60209081029190910101526106c38282610c39565b60006106e983600460149054906101000a900467ffffffffffffffff16620493e0610c7c565b9050600787876040516106fd929190611dbd565b908152604080519182900360209081018320546000858152600990925291902080546001600160a01b0319166001600160a01b0390921691909117905560079061074a9089908990611dbd565b908152604080519182900360209081019092205460008481526008845282812080546001600160a01b0319166001600160a01b0390931692909217909155600a909252902061079a858783611de3565b5060066000600789896040516107b1929190611dbd565b9081526040805160209281900383019020546001600160a01b0316835282820193909352908201600090812054938152600b9091522055505050505050565b600154604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163d328a91e9160048083019260009291908290030181865afa158015610853573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087b9190810190611ea4565b905090565b6001546000906001600160a01b031663d227d2458561089e88610dd4565b86866040518563ffffffff1660e01b81526004016108bf9493929190611f12565b602060405180830381865afa1580156108dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109009190611f4e565b95945050505050565b610911610af8565b6001600160a01b03811661098d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104df565b61099681610b52565b50565b6109a1610af8565b600180546001600160a01b0319166001600160a01b03831617905550565b827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c925891156283836040516109f1929190611f7c565b60405180910390a260008251118015610a2057506000838152600860205260409020546001600160a01b031615155b15610af357600083815260096020908152604080832054600a9092529091208054849261032d926001600160a01b0390911691849190610a5f90611c7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90611c7d565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b50505060008a8152600b6020526040902054915061109f9050565b505050565b6000546001600160a01b031633146103f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600003610bdd576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836001811115610bf057610bf0611fa1565b90816001811115610c0357610c03611fa1565b90525060408401828015610c1957610c19611fa1565b90818015610c2957610c29611fa1565b9052506060909301929092525050565b8051600003610c74576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b60015460009081906001600160a01b03166328242b0485610c9c88610dd4565b866040518463ffffffff1660e01b8152600401610cbb93929190611fb7565b6020604051808303816000875af1158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe9190611ff0565b9050600160009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190612009565b60008281526002602052604080822080546001600160a01b0319166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a2949350505050565b6060610dde6116d6565b8051610dec90610100611285565b50610e2c816040518060400160405280600c81526020017f636f64654c6f636174696f6e00000000000000000000000000000000000000008152506112ff565b610e4b8184600001516001811115610e4657610e46611fa1565b611318565b610e8a816040518060400160405280600881526020017f6c616e67756167650000000000000000000000000000000000000000000000008152506112ff565b610ea48184604001516000811115610e4657610e46611fa1565b610ee3816040518060400160405280600681526020017f736f7572636500000000000000000000000000000000000000000000000000008152506112ff565b610ef18184606001516112ff565b60a08301515115610f9757610f3b816040518060400160405280600481526020017f61726773000000000000000000000000000000000000000000000000000000008152506112ff565b610f4481611355565b60005b8360a0015151811015610f8d57610f7b828560a001518381518110610f6e57610f6e611dcd565b60200260200101516112ff565b80610f8581611c48565b915050610f47565b50610f9781611379565b6080830151511561109757600083602001516001811115610fba57610fba611fa1565b03610ff1576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611030816040518060400160405280600f81526020017f736563726574734c6f636174696f6e00000000000000000000000000000000008152506112ff565b61104a8184602001516001811115610e4657610e46611fa1565b611089816040518060400160405280600781526020017f73656372657473000000000000000000000000000000000000000000000000008152506112ff565b611097818460800151611397565b515192915050565b600480546040517f55beba040000000000000000000000000000000000000000000000000000000081526000926001600160a01b03909216916355beba04916110ea918891016119ed565b602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190612009565b90506001600d8460405161113f9190611c61565b9081526040805160209281900383019020805460ff1916931515939093179092556001600160a01b03871660009081526006909152908120600201805484929061118a908490612026565b90915550506005546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260016024830152909116906340c10f1990604401600060405180830381600087803b1580156111f657600080fd5b505af115801561120a573d6000803e3d6000fd5b5050604080518581526001600160a01b03851660208201527f6aa3eac93d079e5e100b1029be716caa33586c96aa4baac390669fb5c2a21212935001905060405180910390a1604051339083156108fc029084906000818181858888f1935050505015801561127d573d6000803e3d6000fd5b505050505050565b6040805180820190915260608152600060208201526112a5602083612039565b156112cd576112b5602083612039565b6112c0906020612026565b6112ca908361205b565b91505b6020808401839052604051808552600081529081840101818110156112f157600080fd5b604052508290505b92915050565b61130c82600383516113a0565b8151610af390826114c1565b81516113259060c26114e9565b50611351828260405160200161133d91815260200190565b604051602081830303815290604052611397565b5050565b611360816004611552565b600181602001818151611373919061205b565b90525050565b611384816007611552565b6001816020018181516113739190612026565b61130c82600283515b60178167ffffffffffffffff16116113c757825161032d9060e0600585901b1683176114e9565b60ff8167ffffffffffffffff16116114095782516113f0906018611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166001611569565b61ffff8167ffffffffffffffff161161144c578251611433906019611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166002611569565b63ffffffff8167ffffffffffffffff161161149157825161147890601a611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166004611569565b82516114a890601b611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166008611569565b6040805180820190915260608152600060208201526114e2838384516115ee565b9392505050565b604080518082019091526060815260006020820152825151600061150e82600161205b565b90508460200151821061152f5761152f8561152a83600261206e565b6116bf565b8451602083820101858153508051821115611548578181525b5093949350505050565b8151610af390601f611fe0600585901b16176114e9565b604080518082019091526060815260006020820152835151600061158d828561205b565b905085602001518111156115aa576115aa8661152a83600261206e565b600060016115ba86610100612169565b6115c49190612026565b905086518281018783198251161781525080518311156115e2578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561161157600080fd5b8351516000611620848361205b565b9050856020015181111561163d5761163d8661152a83600261206e565b855180518382016020019160009180851115611657578482525b505050602086015b60208610611697578051825261167660208361205b565b915061168360208261205b565b9050611690602087612026565b955061165f565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516116cb8383611285565b5061032d83826114c1565b60405180604001604052806116fe604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156117445761174461170b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117735761177361170b565b604052919050565b600067ffffffffffffffff8211156117955761179561170b565b50601f01601f191660200190565b600082601f8301126117b457600080fd5b81356117c76117c28261177b565b61174a565b8181528460208386010111156117dc57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561180e57600080fd5b83359250602084013567ffffffffffffffff8082111561182d57600080fd5b611839878388016117a3565b9350604086013591508082111561184f57600080fd5b5061185c868287016117a3565b9150509250925092565b60006020828403121561187857600080fd5b813567ffffffffffffffff81111561188f57600080fd5b61189b848285016117a3565b949350505050565b600080604083850312156118b657600080fd5b823567ffffffffffffffff8111156118cd57600080fd5b6118d9858286016117a3565b95602094909401359450505050565b60008083601f8401126118fa57600080fd5b50813567ffffffffffffffff81111561191257600080fd5b60208301915083602082850101111561192a57600080fd5b9250929050565b6000806000806040858703121561194757600080fd5b843567ffffffffffffffff8082111561195f57600080fd5b61196b888389016118e8565b9096509450602087013591508082111561198457600080fd5b50611991878288016118e8565b95989497509550505050565b60005b838110156119b85781810151838201526020016119a0565b50506000910152565b600081518084526119d981602086016020860161199d565b601f01601f19169290920160200192915050565b6020815260006114e260208301846119c1565b803560028110611a0f57600080fd5b919050565b803560018110611a0f57600080fd5b600082601f830112611a3457600080fd5b8135602067ffffffffffffffff80831115611a5157611a5161170b565b8260051b611a6083820161174a565b9384528581018301938381019088861115611a7a57600080fd5b84880192505b85831015611ab657823584811115611a985760008081fd5b611aa68a87838c01016117a3565b8352509184019190840190611a80565b98975050505050505050565b803567ffffffffffffffff81168114611a0f57600080fd5b803563ffffffff81168114611a0f57600080fd5b60008060008060808587031215611b0457600080fd5b843567ffffffffffffffff80821115611b1c57600080fd5b9086019060c08289031215611b3057600080fd5b611b38611721565b611b4183611a00565b8152611b4f60208401611a00565b6020820152611b6060408401611a14565b6040820152606083013582811115611b7757600080fd5b611b838a8286016117a3565b606083015250608083013582811115611b9b57600080fd5b611ba78a8286016117a3565b60808301525060a083013582811115611bbf57600080fd5b611bcb8a828601611a23565b60a0830152509550611be291505060208601611ac2565b9250611bf060408601611ada565b9396929550929360600135925050565b6001600160a01b038116811461099657600080fd5b600060208284031215611c2757600080fd5b81356114e281611c00565b634e487b7160e01b600052601160045260246000fd5b600060018201611c5a57611c5a611c32565b5060010190565b60008251611c7381846020870161199d565b9190910192915050565b600181811c90821680611c9157607f821691505b602082108103611cb157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610af357600081815260208120601f850160051c81016020861015611cde5750805b601f850160051c820191505b8181101561127d57828155600101611cea565b815167ffffffffffffffff811115611d1757611d1761170b565b611d2b81611d258454611c7d565b84611cb7565b602080601f831160018114611d605760008415611d485750858301515b600019600386901b1c1916600185901b17855561127d565b600085815260208120601f198616915b82811015611d8f57888601518255948401946001909101908401611d70565b5085821015611dad5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff831115611dfb57611dfb61170b565b611e0f83611e098354611c7d565b83611cb7565b6000601f841160018114611e435760008515611e2b5750838201355b600019600387901b1c1916600186901b178355611e9d565b600083815260209020601f19861690835b82811015611e745786850135825560209485019460019092019101611e54565b5086821015611e915760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208284031215611eb657600080fd5b815167ffffffffffffffff811115611ecd57600080fd5b8201601f81018413611ede57600080fd5b8051611eec6117c28261177b565b818152856020838501011115611f0157600080fd5b61090082602083016020860161199d565b67ffffffffffffffff85168152608060208201526000611f3560808301866119c1565b63ffffffff949094166040830152506060015292915050565b600060208284031215611f6057600080fd5b81516bffffffffffffffffffffffff811681146114e257600080fd5b604081526000611f8f60408301856119c1565b828103602084015261090081856119c1565b634e487b7160e01b600052602160045260246000fd5b67ffffffffffffffff84168152606060208201526000611fda60608301856119c1565b905063ffffffff83166040830152949350505050565b60006020828403121561200257600080fd5b5051919050565b60006020828403121561201b57600080fd5b81516114e281611c00565b818103818111156112f9576112f9611c32565b60008261205657634e487b7160e01b600052601260045260246000fd5b500690565b808201808211156112f9576112f9611c32565b80820281158282048414176112f9576112f9611c32565b600181815b808511156120c05781600019048211156120a6576120a6611c32565b808516156120b357918102915b93841c939080029061208a565b509250929050565b6000826120d7575060016112f9565b816120e4575060006112f9565b81600181146120fa576002811461210457612120565b60019150506112f9565b60ff84111561211557612115611c32565b50506001821b6112f9565b5060208310610133831016604e8410600b8410161715612143575081810a6112f9565b61214d8383612085565b806000190482111561216157612161611c32565b029392505050565b60006114e283836120c856fea2646970667358221220ca8319bdeda1c08c3f527a77c9975d4c8ab2fdfe7d66acb035310e218b02ef1964736f6c63430008120033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c806396d05b0411610074578063d4b391751161004e578063d4b3917514610210578063f2fde38b1461024d578063f7023bb61461026d57600080fd5b806396d05b041461018d578063cb6ab5d8146101ce578063d328a91e146101ee57600080fd5b8063601a8d33116100a5578063601a8d3314610133578063715018a6146101465780638da5cb5b1461015b57600080fd5b80630ca76175146100c15780630f0a585f146100e3575b600080fd5b3480156100cd57600080fd5b506100e16100dc3660046117f9565b61028d565b005b3480156100ef57600080fd5b5061011e6100fe366004611866565b8051602081830181018051600d8252928201919093012091525460ff1681565b60405190151581526020015b60405180910390f35b6100e16101413660046118a3565b610333565b34801561015257600080fd5b506100e16103e3565b34801561016757600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161012a565b34801561019957600080fd5b506101756101a8366004611866565b80516020818301810180516007825292820191909301209152546001600160a01b031681565b3480156101da57600080fd5b506100e16101e9366004611931565b6103f7565b3480156101fa57600080fd5b506102036107f0565b60405161012a91906119ed565b34801561021c57600080fd5b5061023061022b366004611aee565b610880565b6040516bffffffffffffffffffffffff909116815260200161012a565b34801561025957600080fd5b506100e1610268366004611c15565b610909565b34801561027957600080fd5b506100e1610288366004611c15565b610999565b60008381526002602052604090205483906001600160a01b031633146102df576040517fa0c5ec6300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526002602052604080822080546001600160a01b03191690555182917f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e691a261032d8484846109bf565b50505050565b6003805490600061034383611c48565b9190505550336007836040516103599190611c61565b908152604080516020928190038301812080546001600160a01b0319166001600160a01b03959095169490941790935560808301815260035483528183018581523484830152606084018590523360009081526006909352912082518155905160018201906103c89082611cfd565b50604082015160028201556060909101516003909101555050565b6103eb610af8565b6103f56000610b52565b565b600660006007868660405161040d929190611dbd565b908152602001604051809103902060009054906101000a90046001600160a01b03166001600160a01b03166001600160a01b03168152602001908152602001600020600301546006600060078787604051610469929190611dbd565b9081526040805160209281900383019020546001600160a01b0316835290820192909252016000206002015410156104e85760405162461bcd60e51b815260206004820152601960248201527f6e6f7420656e6f7567682062616c616e636520746f207061790000000000000060448201526064015b60405180910390fd5b600d82826040516104fa929190611dbd565b9081526040519081900360200190205460ff161561055a5760405162461bcd60e51b815260206004820152601460248201527f7265717565737420616c7265616479207573656400000000000000000000000060448201526064016104df565b6105946040805160c08101909152806000815260200160008152602001600081526020016060815260200160608152602001606081525090565b610636600080600c80546105a790611c7d565b80601f01602080910402602001604051908101604052809291908181526020018280546105d390611c7d565b80156106205780601f106105f557610100808354040283529160200191610620565b820191906000526020600020905b81548152906001019060200180831161060357829003601f168201915b505050505084610ba2909392919063ffffffff16565b604080516001808252818301909252600091816020015b606081526020019060019003908161064d57905050905083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052508551869450909250151590506106ae576106ae611dcd565b60209081029190910101526106c38282610c39565b60006106e983600460149054906101000a900467ffffffffffffffff16620493e0610c7c565b9050600787876040516106fd929190611dbd565b908152604080519182900360209081018320546000858152600990925291902080546001600160a01b0319166001600160a01b0390921691909117905560079061074a9089908990611dbd565b908152604080519182900360209081019092205460008481526008845282812080546001600160a01b0319166001600160a01b0390931692909217909155600a909252902061079a858783611de3565b5060066000600789896040516107b1929190611dbd565b9081526040805160209281900383019020546001600160a01b0316835282820193909352908201600090812054938152600b9091522055505050505050565b600154604080517fd328a91e00000000000000000000000000000000000000000000000000000000815290516060926001600160a01b03169163d328a91e9160048083019260009291908290030181865afa158015610853573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261087b9190810190611ea4565b905090565b6001546000906001600160a01b031663d227d2458561089e88610dd4565b86866040518563ffffffff1660e01b81526004016108bf9493929190611f12565b602060405180830381865afa1580156108dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109009190611f4e565b95945050505050565b610911610af8565b6001600160a01b03811661098d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104df565b61099681610b52565b50565b6109a1610af8565b600180546001600160a01b0319166001600160a01b03831617905550565b827f7bab0ec163b5c132c72b8146ac4d6e067e82ed58f8b131150aa71c925891156283836040516109f1929190611f7c565b60405180910390a260008251118015610a2057506000838152600860205260409020546001600160a01b031615155b15610af357600083815260096020908152604080832054600a9092529091208054849261032d926001600160a01b0390911691849190610a5f90611c7d565b80601f0160208091040260200160405190810160405280929190818152602001828054610a8b90611c7d565b8015610ad85780601f10610aad57610100808354040283529160200191610ad8565b820191906000526020600020905b815481529060010190602001808311610abb57829003601f168201915b50505060008a8152600b6020526040902054915061109f9050565b505050565b6000546001600160a01b031633146103f55760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104df565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8051600003610bdd576040517f22ce3edd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83836001811115610bf057610bf0611fa1565b90816001811115610c0357610c03611fa1565b90525060408401828015610c1957610c19611fa1565b90818015610c2957610c29611fa1565b9052506060909301929092525050565b8051600003610c74576040517ffe936cb700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60a090910152565b60015460009081906001600160a01b03166328242b0485610c9c88610dd4565b866040518463ffffffff1660e01b8152600401610cbb93929190611fb7565b6020604051808303816000875af1158015610cda573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfe9190611ff0565b9050600160009054906101000a90046001600160a01b03166001600160a01b0316635ab1bd536040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190612009565b60008281526002602052604080822080546001600160a01b0319166001600160a01b039490941693909317909255905182917f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db891a2949350505050565b6060610dde6116d6565b8051610dec90610100611285565b50610e2c816040518060400160405280600c81526020017f636f64654c6f636174696f6e00000000000000000000000000000000000000008152506112ff565b610e4b8184600001516001811115610e4657610e46611fa1565b611318565b610e8a816040518060400160405280600881526020017f6c616e67756167650000000000000000000000000000000000000000000000008152506112ff565b610ea48184604001516000811115610e4657610e46611fa1565b610ee3816040518060400160405280600681526020017f736f7572636500000000000000000000000000000000000000000000000000008152506112ff565b610ef18184606001516112ff565b60a08301515115610f9757610f3b816040518060400160405280600481526020017f61726773000000000000000000000000000000000000000000000000000000008152506112ff565b610f4481611355565b60005b8360a0015151811015610f8d57610f7b828560a001518381518110610f6e57610f6e611dcd565b60200260200101516112ff565b80610f8581611c48565b915050610f47565b50610f9781611379565b6080830151511561109757600083602001516001811115610fba57610fba611fa1565b03610ff1576040517fa80d31f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611030816040518060400160405280600f81526020017f736563726574734c6f636174696f6e00000000000000000000000000000000008152506112ff565b61104a8184602001516001811115610e4657610e46611fa1565b611089816040518060400160405280600781526020017f73656372657473000000000000000000000000000000000000000000000000008152506112ff565b611097818460800151611397565b515192915050565b600480546040517f55beba040000000000000000000000000000000000000000000000000000000081526000926001600160a01b03909216916355beba04916110ea918891016119ed565b602060405180830381865afa158015611107573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112b9190612009565b90506001600d8460405161113f9190611c61565b9081526040805160209281900383019020805460ff1916931515939093179092556001600160a01b03871660009081526006909152908120600201805484929061118a908490612026565b90915550506005546040517f40c10f190000000000000000000000000000000000000000000000000000000081526001600160a01b03838116600483015260016024830152909116906340c10f1990604401600060405180830381600087803b1580156111f657600080fd5b505af115801561120a573d6000803e3d6000fd5b5050604080518581526001600160a01b03851660208201527f6aa3eac93d079e5e100b1029be716caa33586c96aa4baac390669fb5c2a21212935001905060405180910390a1604051339083156108fc029084906000818181858888f1935050505015801561127d573d6000803e3d6000fd5b505050505050565b6040805180820190915260608152600060208201526112a5602083612039565b156112cd576112b5602083612039565b6112c0906020612026565b6112ca908361205b565b91505b6020808401839052604051808552600081529081840101818110156112f157600080fd5b604052508290505b92915050565b61130c82600383516113a0565b8151610af390826114c1565b81516113259060c26114e9565b50611351828260405160200161133d91815260200190565b604051602081830303815290604052611397565b5050565b611360816004611552565b600181602001818151611373919061205b565b90525050565b611384816007611552565b6001816020018181516113739190612026565b61130c82600283515b60178167ffffffffffffffff16116113c757825161032d9060e0600585901b1683176114e9565b60ff8167ffffffffffffffff16116114095782516113f0906018611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166001611569565b61ffff8167ffffffffffffffff161161144c578251611433906019611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166002611569565b63ffffffff8167ffffffffffffffff161161149157825161147890601a611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166004611569565b82516114a890601b611fe0600586901b16176114e9565b50825161032d9067ffffffffffffffff83166008611569565b6040805180820190915260608152600060208201526114e2838384516115ee565b9392505050565b604080518082019091526060815260006020820152825151600061150e82600161205b565b90508460200151821061152f5761152f8561152a83600261206e565b6116bf565b8451602083820101858153508051821115611548578181525b5093949350505050565b8151610af390601f611fe0600585901b16176114e9565b604080518082019091526060815260006020820152835151600061158d828561205b565b905085602001518111156115aa576115aa8661152a83600261206e565b600060016115ba86610100612169565b6115c49190612026565b905086518281018783198251161781525080518311156115e2578281525b50959695505050505050565b604080518082019091526060815260006020820152825182111561161157600080fd5b8351516000611620848361205b565b9050856020015181111561163d5761163d8661152a83600261206e565b855180518382016020019160009180851115611657578482525b505050602086015b60208610611697578051825261167660208361205b565b915061168360208261205b565b9050611690602087612026565b955061165f565b51815160001960208890036101000a0190811690199190911617905250849150509392505050565b81516116cb8383611285565b5061032d83826114c1565b60405180604001604052806116fe604051806040016040528060608152602001600081525090565b8152602001600081525090565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156117445761174461170b565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156117735761177361170b565b604052919050565b600067ffffffffffffffff8211156117955761179561170b565b50601f01601f191660200190565b600082601f8301126117b457600080fd5b81356117c76117c28261177b565b61174a565b8181528460208386010111156117dc57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060006060848603121561180e57600080fd5b83359250602084013567ffffffffffffffff8082111561182d57600080fd5b611839878388016117a3565b9350604086013591508082111561184f57600080fd5b5061185c868287016117a3565b9150509250925092565b60006020828403121561187857600080fd5b813567ffffffffffffffff81111561188f57600080fd5b61189b848285016117a3565b949350505050565b600080604083850312156118b657600080fd5b823567ffffffffffffffff8111156118cd57600080fd5b6118d9858286016117a3565b95602094909401359450505050565b60008083601f8401126118fa57600080fd5b50813567ffffffffffffffff81111561191257600080fd5b60208301915083602082850101111561192a57600080fd5b9250929050565b6000806000806040858703121561194757600080fd5b843567ffffffffffffffff8082111561195f57600080fd5b61196b888389016118e8565b9096509450602087013591508082111561198457600080fd5b50611991878288016118e8565b95989497509550505050565b60005b838110156119b85781810151838201526020016119a0565b50506000910152565b600081518084526119d981602086016020860161199d565b601f01601f19169290920160200192915050565b6020815260006114e260208301846119c1565b803560028110611a0f57600080fd5b919050565b803560018110611a0f57600080fd5b600082601f830112611a3457600080fd5b8135602067ffffffffffffffff80831115611a5157611a5161170b565b8260051b611a6083820161174a565b9384528581018301938381019088861115611a7a57600080fd5b84880192505b85831015611ab657823584811115611a985760008081fd5b611aa68a87838c01016117a3565b8352509184019190840190611a80565b98975050505050505050565b803567ffffffffffffffff81168114611a0f57600080fd5b803563ffffffff81168114611a0f57600080fd5b60008060008060808587031215611b0457600080fd5b843567ffffffffffffffff80821115611b1c57600080fd5b9086019060c08289031215611b3057600080fd5b611b38611721565b611b4183611a00565b8152611b4f60208401611a00565b6020820152611b6060408401611a14565b6040820152606083013582811115611b7757600080fd5b611b838a8286016117a3565b606083015250608083013582811115611b9b57600080fd5b611ba78a8286016117a3565b60808301525060a083013582811115611bbf57600080fd5b611bcb8a828601611a23565b60a0830152509550611be291505060208601611ac2565b9250611bf060408601611ada565b9396929550929360600135925050565b6001600160a01b038116811461099657600080fd5b600060208284031215611c2757600080fd5b81356114e281611c00565b634e487b7160e01b600052601160045260246000fd5b600060018201611c5a57611c5a611c32565b5060010190565b60008251611c7381846020870161199d565b9190910192915050565b600181811c90821680611c9157607f821691505b602082108103611cb157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115610af357600081815260208120601f850160051c81016020861015611cde5750805b601f850160051c820191505b8181101561127d57828155600101611cea565b815167ffffffffffffffff811115611d1757611d1761170b565b611d2b81611d258454611c7d565b84611cb7565b602080601f831160018114611d605760008415611d485750858301515b600019600386901b1c1916600185901b17855561127d565b600085815260208120601f198616915b82811015611d8f57888601518255948401946001909101908401611d70565b5085821015611dad5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8183823760009101908152919050565b634e487b7160e01b600052603260045260246000fd5b67ffffffffffffffff831115611dfb57611dfb61170b565b611e0f83611e098354611c7d565b83611cb7565b6000601f841160018114611e435760008515611e2b5750838201355b600019600387901b1c1916600186901b178355611e9d565b600083815260209020601f19861690835b82811015611e745786850135825560209485019460019092019101611e54565b5086821015611e915760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b600060208284031215611eb657600080fd5b815167ffffffffffffffff811115611ecd57600080fd5b8201601f81018413611ede57600080fd5b8051611eec6117c28261177b565b818152856020838501011115611f0157600080fd5b61090082602083016020860161199d565b67ffffffffffffffff85168152608060208201526000611f3560808301866119c1565b63ffffffff949094166040830152506060015292915050565b600060208284031215611f6057600080fd5b81516bffffffffffffffffffffffff811681146114e257600080fd5b604081526000611f8f60408301856119c1565b828103602084015261090081856119c1565b634e487b7160e01b600052602160045260246000fd5b67ffffffffffffffff84168152606060208201526000611fda60608301856119c1565b905063ffffffff83166040830152949350505050565b60006020828403121561200257600080fd5b5051919050565b60006020828403121561201b57600080fd5b81516114e281611c00565b818103818111156112f9576112f9611c32565b60008261205657634e487b7160e01b600052601260045260246000fd5b500690565b808201808211156112f9576112f9611c32565b80820281158282048414176112f9576112f9611c32565b600181815b808511156120c05781600019048211156120a6576120a6611c32565b808516156120b357918102915b93841c939080029061208a565b509250929050565b6000826120d7575060016112f9565b816120e4575060006112f9565b81600181146120fa576002811461210457612120565b60019150506112f9565b60ff84111561211557612115611c32565b50506001821b6112f9565b5060208310610133831016604e8410600b8410161715612143575081810a6112f9565b61214d8383612085565b806000190482111561216157612161611c32565b029392505050565b60006114e283836120c856fea2646970667358221220ca8319bdeda1c08c3f527a77c9975d4c8ab2fdfe7d66acb035310e218b02ef1964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "params": {
          "gasLimit": "gas limit for the fulfillment callback",
          "req": "The initialized Functions.Request",
          "subscriptionId": "The subscription ID"
        },
        "returns": {
          "_0": "billedCost Cost in Juels (1e18) of LINK"
        }
      },
      "getDONPublicKey()": {
        "details": "All Oracles nodes have the corresponding private key needed to decrypt the secrets encrypted with the public key",
        "returns": {
          "_0": "publicKey DON's public key"
        }
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "params": {
          "err": "Aggregated error either from the user code or from the execution pipeline. Either response or error parameter will be set, but never both.",
          "requestId": "The requestId returned by FunctionsClient.sendRequest().",
          "response": "Aggregated response from the user code."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateOracleAddress(address)": {
        "params": {
          "oracle": "New oracle address"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "claim(string,string)": {
        "notice": "Can be called by maintainers to claim donations made to their repositories"
      },
      "estimateCost((uint8,uint8,uint8,string,bytes,string[]),uint64,uint32,uint256)": {
        "notice": "Estimate the total cost that will be charged to a subscription to make a request: gas re-imbursement, plus DON fee, plus Registry fee"
      },
      "getDONPublicKey()": {
        "notice": "Returns the DON's secp256k1 public key used to encrypt secrets"
      },
      "handleOracleFulfillment(bytes32,bytes,bytes)": {
        "notice": "Chainlink Functions response handler called by the designated transmitter node in an OCR round."
      },
      "updateOracleAddress(address)": {
        "notice": "Allows the Functions oracle address to be updated"
      }
    },
    "notice": "The core functionality is to enable  Creators to list thier github repos, set how the deposit that they will be paid , once the contributor create PR and close the issue , the contract release the payment to the contributor and mint DAO token to the contributor",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 396,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4793,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "s_oracle",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(FunctionsOracleInterface)5227"
      },
      {
        "astId": 4797,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3780,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "counter",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3783,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "registration",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(Registration)4437"
      },
      {
        "astId": 3785,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "subscriptionId",
        "offset": 20,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 3788,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "token",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(DAOToken)4219"
      },
      {
        "astId": 3793,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "CreatorListings",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(Listing)3806_storage)"
      },
      {
        "astId": 3797,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "githubToCreatorAddress",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_string_memory_ptr,t_address)"
      },
      {
        "astId": 3810,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "runningClaims",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3814,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "requestIdToCreator",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 3818,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "requestIdToprUrl",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_string_storage)"
      },
      {
        "astId": 3822,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "requestIdToListingId",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 3824,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "checkLogic",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 3828,
        "contract": "contracts/ContributionPool.sol:ContributionPool",
        "label": "usedRequests",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_string_memory_ptr,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(DAOToken)4219": {
        "encoding": "inplace",
        "label": "contract DAOToken",
        "numberOfBytes": "20"
      },
      "t_contract(FunctionsOracleInterface)5227": {
        "encoding": "inplace",
        "label": "contract FunctionsOracleInterface",
        "numberOfBytes": "20"
      },
      "t_contract(Registration)4437": {
        "encoding": "inplace",
        "label": "contract Registration",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(Listing)3806_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ContributionPool.Listing)",
        "numberOfBytes": "32",
        "value": "t_struct(Listing)3806_storage"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_address)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_string_memory_ptr,t_bool)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Listing)3806_storage": {
        "encoding": "inplace",
        "label": "struct ContributionPool.Listing",
        "members": [
          {
            "astId": 3799,
            "contract": "contracts/ContributionPool.sol:ContributionPool",
            "label": "listingId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3801,
            "contract": "contracts/ContributionPool.sol:ContributionPool",
            "label": "githubRepo",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 3803,
            "contract": "contracts/ContributionPool.sol:ContributionPool",
            "label": "currentDeposit",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 3805,
            "contract": "contracts/ContributionPool.sol:ContributionPool",
            "label": "payableAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}