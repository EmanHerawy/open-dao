{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        require(!paused(), \"Pausable: paused\");\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        require(paused(), \"Pausable: not paused\");\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/ContributionPool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./Registration.sol\";\n\n/// This contract should handle the relation between open source project creator and open source project contributors.\n/// personas : \n    //// 1- Open source project contributors , looking for open source project to contribute to and get paid for thier work . with each contribution DAO token is minted \n    //// 2- Open source project creator , look for contributors to thier open source project and pay them for thier work . They have to be DAO token holder to be able to list thier project and they have to deposit bug bounty amount in the contract to be able to pay contributors\n/// The core functionality is to enable  Creators to list thier github repos, set how the deposit that they will be paid , once the contributor create PR and close the issue , the contract release the payment to the contributor and mint DAO token to the contributor\ncontract ContributionPool {\n    \n}"
    },
    "contracts/GitHubFunctions.sol": {
      "content": "// // SPDX-License-Identifier: MIT\n// pragma solidity 0.8.19;\n\n// import {Functions, FunctionsClient} from \"./dev/functions/FunctionsClient.sol\";\n// import {ConfirmedOwner} from \"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\";\n// import {FunctionsRequest} from \"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\";\n\n// /**\n//  * Request testnet LINK and ETH here: https://faucets.chain.link/\n//  * Find information on LINK Token Contracts and get the latest ETH and LINK faucets here: https://docs.chain.link/resources/link-token-contracts/\n//  */\n\n// /**\n//  * @title GithubFunctionsConsumer\n//  * @notice This is an example contract to show how to make HTTP requests using Chainlink\n//  * @dev This contract uses hardcoded values and should not be used in production.\n//  */\n// contract GithubFunctionsConsumer is FunctionsClient, ConfirmedOwner {\n//     using FunctionsRequest for FunctionsRequest.Request;\n\n//     // State variables to store the last request ID, response, and error\n//     bytes32 public s_lastRequestId;\n//     bytes public s_lastResponse;\n//     bytes public s_lastError;\n\n//     // Custom error type\n//     error UnexpectedRequestID(bytes32 requestId);\n\n//     // Event to log responses\n//     event Response(\n//         bytes32 indexed requestId,\n//         string character,\n//         bytes response,\n//         bytes err\n//     );\n\n//     // Router address - Hardcoded for Mumbai\n//     // Check to get the router address for your supported network https://docs.chain.link/chainlink-functions/supported-networks\n//     address router = 0x6E2dc0F9DB014aE19888F539E59285D2Ea04244C;\n\n//     // JavaScript source code\n//     // Fetch character name from the Star Wars API.\n//     // Documentation: https://swapi.dev/documentation#people\n//     string source =\n//         \"const characterId = args[0];\"\n//         \"const apiResponse = await Functions.makeHttpRequest({\"\n//         \"url: `https://swapi.dev/api/people/${characterId}/`\"\n//         \"});\"\n//         \"if (apiResponse.error) {\"\n//         \"throw Error('Request failed');\"\n//         \"}\"\n//         \"const { data } = apiResponse;\"\n//         \"return Functions.encodeString(data.name);\";\n\n//     //Callback gas limit\n//     uint32 gasLimit = 300000;\n\n//     // donID - Hardcoded for Mumbai\n//     // Check to get the donID for your supported network https://docs.chain.link/chainlink-functions/supported-networks\n//     bytes32 donID =\n//         0x66756e2d706f6c79676f6e2d6d756d6261692d31000000000000000000000000;\n\n//     // State variable to store the returned character information\n//     string public character;\n\n//     /**\n//      * @notice Initializes the contract with the Chainlink router address and sets the contract owner\n//      */\n//     constructor() FunctionsClient(router) ConfirmedOwner(msg.sender) {}\n\n//     /**\n//      * @notice Sends an HTTP request for character information\n//      * @param subscriptionId The ID for the Chainlink subscription\n//      * @param args The arguments to pass to the HTTP request\n//      * @return requestId The ID of the request\n//      */\n//     function sendRequest(\n//         uint64 subscriptionId,\n//         string[] calldata args\n//     ) external onlyOwner returns (bytes32 requestId) {\n//         FunctionsRequest.Request memory req;\n//         req.initializeRequestForInlineJavaScript(source); // Initialize the request with JS code\n//         if (args.length > 0) req.setArgs(args); // Set the arguments for the request\n\n//         // Send the request and store the request ID\n//         s_lastRequestId = _sendRequest(\n//             req.encodeCBOR(),\n//             subscriptionId,\n//             gasLimit,\n//             donID\n//         );\n\n//         return s_lastRequestId;\n//     }\n\n//     /**\n//      * @notice Callback function for fulfilling a request\n//      * @param requestId The ID of the request to fulfill\n//      * @param response The HTTP response data\n//      * @param err Any errors from the Functions request\n//      */\n//     function fulfillRequest(\n//         bytes32 requestId,\n//         bytes memory response,\n//         bytes memory err\n//     ) internal override {\n//         if (s_lastRequestId != requestId) {\n//             revert UnexpectedRequestID(requestId); // Check if request IDs match\n//         }\n//         // Update the contract's state variables with the response and any errors\n//         s_lastResponse = response;\n//         character = string(response);\n//         s_lastError = err;\n\n//         // Emit an event to log the response\n//         emit Response(requestId, character, s_lastResponse, s_lastError);\n//     }\n\n//       /// @notice Finalizes the claim process after Chainlink Functions has finished the authentication\n//   function finalizeClaim(string memory _login, address ) internal {\n   \n\n//     for (uint i = 0; i < unclaimedDonations.length;) {\n//       Donation _current = donationMap[unclaimedDonations[i]];\n//       uint _balance = unclaimedDonations[i].balance;\n\n//       if (_balance > 0 && containsWord(_login, _current.repository())) {\n//         _total += _balance;\n//         _number++;\n//         _current.payout(_maintainer);\n//         delete donationMap[unclaimedDonations[i]];\n//       }\n//       unchecked { i++; }\n//     }\n// }\n"
    },
    "contracts/Registration.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// the contract should manage user registration , for creator and contributors\n\ncontract Registration is Pausable, Ownable {\n\n    mapping (string=>address) public  githubToAddress;\n    mapping (address=>string) public addressToGithub;\n    mapping (address=>uint256) public creatorRegistratedTime;\n    IERC20 daoToken;\n    uint256 public blanceToJoin;\n    constructor(address token , uint256 _blanceToJoin)  {\n        daoToken = IERC20(token);\n        require(_blanceToJoin>10,\"balance must be greater than 10\");\n        blanceToJoin = _blanceToJoin;\n    }\n    function updateBlanceToJoin(uint256 _blanceToJoin) public onlyOwner{\n        require(_blanceToJoin>10,\"balance must be greater than 10\");\n        blanceToJoin = _blanceToJoin;\n    }\n\n        // register as contributor\n\n    function joinAsContributor(string memory githubUsername) public  whenNotPaused{\n        require(githubToAddress[githubUsername] == address(0), \"github username already registered\");\n        githubToAddress[githubUsername] = msg.sender;\n        addressToGithub[msg.sender] = githubUsername;\n        emit ContributorRegistered(msg.sender, githubUsername);\n    }\n\n\n    // join as open-source-project-creator\n    // later we need to handle case of creator manipulating the contract by selling the token after joining \n\n    function joinAsOpenSourceProjectCreator() public  whenNotPaused{\n        require(creatorRegistratedTime[msg.sender]!=0, \"already registered as open source project creator\");\n      /// make sure creator is qualified to join\n        require(daoToken.balanceOf(msg.sender) >= blanceToJoin, \"not enough balance to join\");\n        creatorRegistratedTime[msg.sender] = block.timestamp;\n        emit CreatorRegistered(msg.sender);\n    }\n\n function IsProjectCreatorRegistered(address creatorAddress) public view returns(bool){\n     return creatorRegistratedTime[creatorAddress]!=0;}\n     \n    // leave \n\n\n    function pause() public onlyOwner {\n        _pause();\n    }\n\n    function unpause() public onlyOwner {\n        _unpause();\n    }\n\n    event CreatorRegistered(address indexed creatorAddress);\n    event ContributorRegistered(address indexed contributorAddress, string indexed githubUsername);\n     \n\n}\n\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}